// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using marquee_backend.Data;

#nullable disable

namespace marquee_backend.Migrations
{
    [DbContext(typeof(MarqueeDatabaseContext))]
    partial class MarqueeDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("marquee_backend.Models.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "unique_name")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "unique_username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Auth.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "unique_name")
                        .IsUnique();

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<Guid>("RentableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rentable_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("RentableId");

                    b.HasIndex(new[] { "Title" }, "unique_name")
                        .IsUnique();

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.Rentable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("title");

                    b.Property<Guid?>("Type")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.HasIndex(new[] { "Title" }, "unique_name")
                        .IsUnique();

                    b.ToTable("rentable", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.RentableCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "unique_name")
                        .IsUnique();

                    b.ToTable("rentable_category", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.RentableTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "unique_name")
                        .IsUnique();

                    b.ToTable("rentable_tag", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.RentableTagRentable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("RentableId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rentable_id");

                    b.Property<Guid>("RentableTagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rentable_tag_id");

                    b.HasKey("Id");

                    b.HasIndex("RentableId");

                    b.HasIndex("RentableTagId", "RentableId")
                        .IsUnique()
                        .HasDatabaseName("IX_rentable_tag_rentable_unique");

                    b.ToTable("rentable_tag_rentable", (string)null);
                });

            modelBuilder.Entity("marquee_backend.Models.Auth.UserRole", b =>
                {
                    b.HasOne("marquee_backend.Models.Auth.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_role_role_id");

                    b.HasOne("marquee_backend.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.Part", b =>
                {
                    b.HasOne("marquee_backend.Models.Inventory.Rentable", null)
                        .WithMany()
                        .HasForeignKey("RentableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_part_rentable_id");
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.Rentable", b =>
                {
                    b.HasOne("marquee_backend.Models.Inventory.RentableCategory", null)
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_rentable_category_id");
                });

            modelBuilder.Entity("marquee_backend.Models.Inventory.RentableTagRentable", b =>
                {
                    b.HasOne("marquee_backend.Models.Inventory.Rentable", null)
                        .WithMany()
                        .HasForeignKey("RentableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentable_id");

                    b.HasOne("marquee_backend.Models.Inventory.RentableTag", null)
                        .WithMany()
                        .HasForeignKey("RentableTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_rentable_tag_id");
                });
#pragma warning restore 612, 618
        }
    }
}
